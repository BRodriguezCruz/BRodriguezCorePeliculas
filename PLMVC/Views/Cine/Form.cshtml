@model ML.Cine
@{
    ViewData["Title"] = "Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<html>
<head>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <script>
        (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })
            ({ key: "AIzaSyCSKBDdPPlfca_zTwyxKiicRQn1qfgRjLw", v: "weekly" });
    </script>
</head>

<body>
    <style type="text/css">
        /* Set the size of the div element that contains the map */
        #map {
            height: 400px; /* The height is 400 pixels */
            width: 100%; /* The width is the width of the web page */
        }
    </style>

    <h1>INGRESE DATOS REQUERIDOS</h1>

    @using (Html.BeginForm("Form", "Cine", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.HiddenFor(model => model.IdCine)

        <div class="row">
            <div class="col-md-4">
                @Html.LabelFor(model => model.Nombre)
                @Html.TextBoxFor(model => model.Nombre, new {@class = "form-control"})
            </div>
            <div class="col-md-4">
                @Html.LabelFor(model => model.Ventas)
                @Html.TextBoxFor(model => model.Ventas, new {@class = "form-control"})
            </div>
            <div class="col-md-4">
                @Html.LabelFor(model => model.Zona.IdZona)
                @Html.DropDownListFor(model => model.Zona.IdZona, new SelectList(Model.Zona.Zonas, "IdZona", "Nombre"), "SELECCIONA ZONA", new {@class = "form-control"})
            </div>

        </div>
        <div class="row">
            <div class="col-md-6">
                @Html.LabelFor(model => model.Direccion)
                @Html.TextBoxFor(model => model.Direccion, new {@class = "form-control", id="txtDireccion"})
            </div>
        </div>
        <br />
        <button class="btn btn-outline-success" type="submit">HECHO</button>
        <a href="@Url.Action("GetAll","Cine")" class="btn btn-warning">Volver</a>
        <hr />
    }

    <!--The div element for the map -->
    <div id="map"></div>
</body>
</html>

@section Scripts    {
    <script type="text/javascript">
        // Initialize and add the map
        var validacion = document.getElementById('txtDireccion').value;

        async function initMap() 
        { //inicio initMap


            if (validacion === "") //si es igual a vacio es un "ADD"
            {
                let map, marcador;
                // The location of Uluru
                const position = { lat: 19.430570307662446, lng: -99.16166352568936 };
                // Request needed libraries.
                //@@ts-ignore
                const { Map } = await google.maps.importLibrary("maps");
                const { AdvancedMarkerView } = await google.maps.importLibrary("marker");

                // The map, centered at Uluru
                map = new Map(document.getElementById("map"), {
                    zoom: 13,
                    center: position,
                    mapId: "DEMO_MAP_ID",
                });


                let infoWindow = new google.maps.InfoWindow({
                    content: "Presiona la locacion",
                    position: position,
                });

                infoWindow.open(map);
                //obtener direccion
                google.maps.event.addListener(map, 'click', function (event) {
                    var geocoder = new google.maps.Geocoder();
                    geocoder.geocode({
                        'latLng': event.latLng
                    },
                        function (results, status) {
                            if (status == google.maps.GeocoderStatus.OK) {
                                if (results[0]) {
                                    $("#txtDireccion").val(results[0].formatted_address);
                                    //marcador
                                    if (marcador) {
                                        marcador.setMap(null); //limpia el marcador si ya existe si no, lo crea
                                    }
                                    marcador = new google.maps.Marker({
                                        position: event.latLng,
                                        map: map,
                                        title: "Estas aqui!"
                                    });
                                    //
                                }
                            }
                        });
                });
            }
            else 
            {
                //LOCALIZAR DIRECCION Y UBICARTE EN BASE A LA DIRECCION DEL UPDATE
                const { Map } = await google.maps.importLibrary("maps");
                const { AdvancedMarkerView } = await google.maps.importLibrary("marker");

                window.addEventListener("load", function () {
                    var direccion = $("#txtDireccion").val();
                    if (direccion !== "") {
                        localizar("map", direccion);
                    }
                });


                function localizar(elemento, direccion) {

                    var geocoder = new google.maps.Geocoder();

                    var map = new Map(document.getElementById("map"), {
                        zoom: 16,
                        scrollwheel: true,
                        mapTypeId: google.maps.MapTypeId.ROADMAP
                    });

                    geocoder.geocode({ 'address': direccion }, function (results, status) 
                    {
                        if (status === 'OK') 
                        {
                            var resultados = results[0].geometry.location,
                                resultados_lat = resultados.lat(),
                                resultados_long = resultados.lng();

                            map.setCenter(results[0].geometry.location);
                            var marker = new google.maps.Marker({
                                map: map,
                                position: results[0].geometry.location,
                                title: "@Model.Nombre!"
                            });
                        }
                    });
                }                  
            }
        }//fin initMap
        initMap();
    </script>

}

